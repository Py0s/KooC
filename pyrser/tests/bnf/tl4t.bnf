/**
    Toy Language 4 Typing
**/

source =
[   
    @ignore("C/C++")
    [
        [#info:i stmt:s #new_rootstmt(_, s, i)]+
        eof
    ]
]

stmt =
[
    [decl_var | decl_fun | expr]:>_
]

decl_var =
[
    __scope__:t
    __scope__:e
    #info:i
    "var" name:n [ ':' type:t ]? [';' | '=' expr:>e ]? #new_declvar(_, n, t, e, i)
]

decl_fun =
[
    #info:i
    "fun" name:n params:p ':' type:t implem:b #new_declfun(_, n, t, p, b, i)
]

params =
[
    '(' [
            param:p #add_param(_, p)
            [',' param:p #add_param(_, p) ]*
            [',' '...' #add_param_variadic(_) ]?
        |   '...' #add_param_variadic(_)
        ]?
    ')'
]

param =
[
    #info:i
    name:n ':' type:t #new_param(_, n, t, i)
]

implem =
[
    ';' /* just a prototype */
    | block:>_
]

name = [ id ]

type = [ id ]

block =
[
    '{' [ #info:i stmt:s #new_stmt(_, s, i) ]+ '}'
]

operators = [
    @ignore('null')
    [ #info:i
    __scope__:priority
    __scope__:assoc
        [
            // assignement
            '=' !'=' #setint(priority, 10) #setstr(assoc, 'right')
            | "+=" #setint(priority, 10) #setstr(assoc, 'right')
            | "-=" #setint(priority, 10) #setstr(assoc, 'right')
            | "*=" #setint(priority, 10) #setstr(assoc, 'right')
            | "/=" #setint(priority, 10) #setstr(assoc, 'right')
            | "%=" #setint(priority, 10) #setstr(assoc, 'right')
            | "<<=" #setint(priority, 10) #setstr(assoc, 'right')
            | ">>=" #setint(priority, 10) #setstr(assoc, 'right')
            | "&=" #setint(priority, 10) #setstr(assoc, 'right')
            | "^=" #setint(priority, 10) #setstr(assoc, 'right')
            | "|=" #setint(priority, 10) #setstr(assoc, 'right')
            // or
            | "||" #setint(priority, 20) #setstr(assoc, 'left')
            // and
            | "&&" #setint(priority, 30) #setstr(assoc, 'left')
            // bor
            | "|" !["|"|"="] #setint(priority, 40) #setstr(assoc, 'left')
            // bxor
            | "^" !"=" #setint(priority, 50) #setstr(assoc, 'left')
            // band
            | "&" !["&"|"="] #setint(priority, 60) #setstr(assoc, 'left')
            // eq/neq
            ["==" | "!="] #setint(priority, 70) #setstr(assoc, 'left')
            // cmp
            | "<=" #setint(priority, 80) #setstr(assoc, 'left')
            | ">=" #setint(priority, 80) #setstr(assoc, 'left')
            | '<' !'<' #setint(priority, 80) #setstr(assoc, 'left')
            | '>' !'>' #setint(priority, 80) #setstr(assoc, 'left')
            // shift
            | "<<" !"=" #setint(priority, 90) #setstr(assoc, 'left')
            | ">>" !"=" #setint(priority, 90) #setstr(assoc, 'left')
            // add
            | '+' !['+'|'='] #setint(priority, 100) #setstr(assoc, 'left')
            | '-' !['-'|'='|'>'] #setint(priority, 100) #setstr(assoc, 'left')
            // mul
            | '*' #setint(priority, 110) #setstr(assoc, 'left')
            | '/' #setint(priority, 110) #setstr(assoc, 'left')
            | '%' #setint(priority, 110) #setstr(assoc, 'left')
        ]:op
        #new_prio_operator(_, op, priority, assoc, i)
    ]
]

expr = [
    #info:i
    expr_tree:e ';'
    #new_expr_stmt(_, e, i)
]

expr_tree = [
    #info:i
    unary_expression:>_
    [
        operators:op
        __scope__:param
        __scope__:case
        #get(case, op, '.assoc')
        [ #eq(case, 'left') unary_expression:>param
        | #eq(case, 'right') expr_tree:>param
        ]
        #new_lhs_rhs(_, op, param, i)
    ]*
]

unary_op =
[
    @ignore('null') 
    #info:i
    [
     '~' !'='
    | '!' !'='
    | '+' !'='
    | '-' !['>'|'=']
    ]:op #new_operator(_, op, i)
]
unary_expression =
[
    postfix_expression:>_
    |
        __scope__:op
        #info:i
        [   unary_op:>op
        |   #info:i
            Base.id:ident
            #new_operator(op, ident, i)
        ]
        unary_expression:expr
        #new_unary(_, op, expr, i)
]

postfix_expression =
[
    primary_expression:>_
    [
        __scope__:pexp
        #info:i
        [
/*        '[' expression:expr ']' #new_array_call(e, e, expr) */
          '(' func_arg_list?:args ')' #new_func_call(pexp, _, args, i)
/*
        | '.' identifier:ident #new_dot(_, _, ident, i)
        | "->" identifier:ident #new_arrow(_, _, ident, i)
        | ["++"|"--"]:op #new_operator(op, op, i) #new_post(_, op, _, i)
*/
        ]
        #bind('_', pexp)
    ]*
]

func_arg_list =
[
    expr_tree:a #new_arg(_, a)
    [
        ','
        expr_tree:a #new_arg(_, a)
    ]*
]

primary_expression =
[
    #info:i '(' expr_tree:expr ')' #new_paren(_, expr, i)
    |[ literal | identifier]:>_
]

identifier =
[
    @ignore('null') 
    [
        #info:i
        rootidentifier:id
        #new_id(_, id, i)
    ]
]

rootidentifier = [ Base.id:>_ ]

dot = [ '.' !'.' ]

pow = [ 'p' | 'P' ]

exp = [ ['e'|'E'] ['+'|'-']? ['0'..'9']+ ]

unsigned_suffix = [ 'u' | 'U' ]

long_suffix = [ 'l' | 'L' ]

float_suffix = [ 'f' | 'F' ]

complex_suffix = [ 'i' | 'I' | 'j' | 'J' ]

decimal_const =
[
    ['0'..'9']+
    unsigned_suffix?
    long_suffix?
    long_suffix?
]

hexadecimal_prefix = [ '0' ['x'|'X'] ]

hexadecimal_digit = [ '0'..'9' | 'a'..'f' | 'A'..'F' ]

hexadecimal_const_int =
[
    hexadecimal_prefix [hexadecimal_digit]+
    unsigned_suffix?
    long_suffix?
    long_suffix?
]

octal_digit = [ '0'..'7' ]

octal_const = 
[
    '0' octal_digit+
    [
       dot octal_digit+
       [pow ['+'|'-']? decimal_const]?
    ]?
]

double_const =
[
    [decimal_const dot ['0'..'9']*| dot ['0'..'9']+] exp?
    long_suffix?
    float_suffix?
    complex_suffix?
]

encoding_prefix = [ "u8" | 'u' | 'U' | 'L' ]

string_const = [ encoding_prefix? Base.string @ignore("C/C++") Base.string* ]

char_const = [ encoding_prefix? Base.char ]

literal =
[
    @ignore('null')
    [
    __scope__:t
    #info:i
    [
        hexadecimal_const_int #set(t, "int")
        | octal_const #set(t, "int")
        | double_const #set(t, "double")
        | decimal_const #set(t, "int")
        | string_const #set(t, "string")
        | char_const #set(t, "char")
    ]:val
    #new_literal(_, val, t, i)
    ]
]
